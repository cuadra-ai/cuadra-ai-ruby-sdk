# cuadra_ai
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CuadraAi
  #  cuadra_ai client class.
  class Client
    include CoreLibrary
    attr_reader :config, :auth_managers

    # Returns the configured authentication OAuth2 instance.
    def oauth_2
      @auth_managers['OAuth2']
    end

    # Access to chat controller.
    # @return [ChatController] Returns the controller instance.
    def chat
      @chat ||= ChatController.new @global_configuration
    end

    # Access to models controller.
    # @return [ModelsController] Returns the controller instance.
    def models
      @models ||= ModelsController.new @global_configuration
    end

    # Access to embeds controller.
    # @return [EmbedsController] Returns the controller instance.
    def embeds
      @embeds ||= EmbedsController.new @global_configuration
    end

    # Access to usage controller.
    # @return [UsageController] Returns the controller instance.
    def usage
      @usage ||= UsageController.new @global_configuration
    end

    # Access to oauth_authorization controller.
    # @return [OauthAuthorizationController] Returns the controller instance.
    def oauth_authorization
      @oauth_authorization ||= OauthAuthorizationController.new @global_configuration
    end

    def initialize(
      connection: nil, adapter: :net_http_persistent, timeout: 30,
      max_retries: 0, retry_interval: 1, backoff_factor: 2,
      retry_statuses: [408, 413, 429, 500, 502, 503, 504, 521, 522, 524],
      retry_methods: %i[get put], http_callback: nil,
      logging_configuration: nil, environment: Environment::PRODUCTION,
      authorization_code_auth_credentials: nil, config: nil
    )
      @config = if config.nil?
                  Configuration.new(
                    connection: connection, adapter: adapter, timeout: timeout,
                    max_retries: max_retries, retry_interval: retry_interval,
                    backoff_factor: backoff_factor,
                    retry_statuses: retry_statuses,
                    retry_methods: retry_methods, http_callback: http_callback,
                    logging_configuration: logging_configuration,
                    environment: environment,
                    authorization_code_auth_credentials: authorization_code_auth_credentials
                  )
                else
                  config
                end
      user_agent_params = BaseController.user_agent_parameters

      @global_configuration = GlobalConfiguration.new(client_configuration: @config)
                                                 .base_uri_executor(@config.method(:get_base_uri))
                                                 .global_errors(BaseController::GLOBAL_ERRORS)
                                                 .user_agent(BaseController.user_agent,
                                                             agent_parameters: user_agent_params)

      initialize_auth_managers(@global_configuration)
      @global_configuration = @global_configuration.auth_managers(@auth_managers)
    end

    # Initializes the auth managers hash used for authenticating API calls.
    # @param [GlobalConfiguration] global_config The global configuration of the SDK)
    def initialize_auth_managers(global_config)
      @auth_managers = {}
      http_client_config = global_config.client_configuration
      %w[OAuth2].each { |auth| @auth_managers[auth] = nil }
      @auth_managers['OAuth2'] = Oauth2.new(http_client_config.authorization_code_auth_credentials,
                                            global_config)
    end
  end
end
