# cuadra_ai
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CuadraAi
  # Chat Model.
  class Chat < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Model name
    # @return [String]
    attr_accessor :model

    # Request content
    # @return [Array[ContentEx]]
    attr_accessor :content

    # If you want to keep context between request, otherwise leave it empty, you
    # get one with every chat you create.
    # @return [String]
    attr_accessor :chat_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['model'] = 'model'
      @_hash['content'] = 'content'
      @_hash['chat_id'] = 'chatId'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        chat_id
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(model:, content:, chat_id: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @model = model
      @content = content
      @chat_id = chat_id unless chat_id == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      model = hash.key?('model') ? hash['model'] : nil
      # Parameter is an array, so we need to iterate through it
      content = nil
      unless hash['content'].nil?
        content = []
        hash['content'].each do |structure|
          content << (ContentEx.from_hash(structure) if structure)
        end
      end

      content = nil unless hash.key?('content')
      chat_id = hash.key?('chatId') ? hash['chatId'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      Chat.new(model: model,
               content: content,
               chat_id: chat_id,
               additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} model: #{@model}, content: #{@content}, chat_id: #{@chat_id},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} model: #{@model.inspect}, content: #{@content.inspect}, chat_id:"\
      " #{@chat_id.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
