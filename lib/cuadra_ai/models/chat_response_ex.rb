# cuadra_ai
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CuadraAi
  # ChatResponseEx Model.
  class ChatResponseEx < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Output generated by the AI to resolve the request
    # @return [String]
    attr_accessor :output

    # Confidence score of how accurate is the output regarding your request
    # @return [Float]
    attr_accessor :confidence_score

    # Model used to resolve your query
    # @return [String]
    attr_accessor :model

    # This is the token usage result of your request
    # @return [UsageEx]
    attr_accessor :usage

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['output'] = 'output'
      @_hash['confidence_score'] = 'confidenceScore'
      @_hash['model'] = 'model'
      @_hash['usage'] = 'usage'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        output
        confidence_score
        model
        usage
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(output: SKIP, confidence_score: SKIP, model: SKIP,
                   usage: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @output = output unless output == SKIP
      @confidence_score = confidence_score unless confidence_score == SKIP
      @model = model unless model == SKIP
      @usage = usage unless usage == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      output = hash.key?('output') ? hash['output'] : SKIP
      confidence_score =
        hash.key?('confidenceScore') ? hash['confidenceScore'] : SKIP
      model = hash.key?('model') ? hash['model'] : SKIP
      usage = UsageEx.from_hash(hash['usage']) if hash['usage']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      ChatResponseEx.new(output: output,
                         confidence_score: confidence_score,
                         model: model,
                         usage: usage,
                         additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} output: #{@output}, confidence_score: #{@confidence_score}, model:"\
      " #{@model}, usage: #{@usage}, additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} output: #{@output.inspect}, confidence_score: #{@confidence_score.inspect},"\
      " model: #{@model.inspect}, usage: #{@usage.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
