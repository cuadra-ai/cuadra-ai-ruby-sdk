# cuadra_ai
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CuadraAi
  # Request content
  class ContentEx < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Text is the task you want the AI to solve.
    # @return [String]
    attr_accessor :text

    # Input Reference is the name of the file, if you're request is from a type
    # other than text, and it's required for most types. It has to contain the
    # same name as the file attached in the request.
    # @return [InlineDataEx]
    attr_accessor :inline_data

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['text'] = 'text'
      @_hash['inline_data'] = 'inlineData'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        inline_data
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(text:, inline_data: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @text = text
      @inline_data = inline_data unless inline_data == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      text = hash.key?('text') ? hash['text'] : nil
      inline_data = InlineDataEx.from_hash(hash['inlineData']) if hash['inlineData']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      ContentEx.new(text: text,
                    inline_data: inline_data,
                    additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} text: #{@text}, inline_data: #{@inline_data}, additional_properties:"\
      " #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} text: #{@text.inspect}, inline_data: #{@inline_data.inspect},"\
      " additional_properties: #{@additional_properties}>"
    end
  end
end
