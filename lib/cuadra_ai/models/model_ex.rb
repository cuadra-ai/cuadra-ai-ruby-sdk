# cuadra_ai
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require 'date'
module CuadraAi
  # ModelEx Model.
  class ModelEx < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Model Id
    # @return [String]
    attr_accessor :id

    # Model name
    # @return [String]
    attr_accessor :name

    # Model type of content generation and processing
    # @return [String]
    attr_accessor :type

    # Brief description of the model
    # @return [String]
    attr_accessor :description

    # Indicates whether is a custom model created by you or not
    # @return [TrueClass | FalseClass]
    attr_accessor :proprietary

    # Base model name, if it was created from another model
    # @return [String]
    attr_accessor :base_model

    # Base model id, if it was created from another model
    # @return [String]
    attr_accessor :base_model_id

    # Creation date
    # @return [DateTime]
    attr_accessor :created_at

    # Last time it was updated
    # @return [DateTime]
    attr_accessor :updated_at

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['id'] = 'id'
      @_hash['name'] = 'name'
      @_hash['type'] = 'type'
      @_hash['description'] = 'description'
      @_hash['proprietary'] = 'proprietary'
      @_hash['base_model'] = 'baseModel'
      @_hash['base_model_id'] = 'baseModelId'
      @_hash['created_at'] = 'createdAt'
      @_hash['updated_at'] = 'updatedAt'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        id
        proprietary
        base_model
        base_model_id
        created_at
        updated_at
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(name:, type:, description:, id: SKIP, proprietary: SKIP,
                   base_model: SKIP, base_model_id: SKIP, created_at: SKIP,
                   updated_at: SKIP, additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @id = id unless id == SKIP
      @name = name
      @type = type
      @description = description
      @proprietary = proprietary unless proprietary == SKIP
      @base_model = base_model unless base_model == SKIP
      @base_model_id = base_model_id unless base_model_id == SKIP
      @created_at = created_at unless created_at == SKIP
      @updated_at = updated_at unless updated_at == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      name = hash.key?('name') ? hash['name'] : nil
      type = hash.key?('type') ? hash['type'] : nil
      description = hash.key?('description') ? hash['description'] : nil
      id = hash.key?('id') ? hash['id'] : SKIP
      proprietary = hash.key?('proprietary') ? hash['proprietary'] : SKIP
      base_model = hash.key?('baseModel') ? hash['baseModel'] : SKIP
      base_model_id = hash.key?('baseModelId') ? hash['baseModelId'] : SKIP
      created_at = if hash.key?('createdAt')
                     (DateTimeHelper.from_rfc3339(hash['createdAt']) if hash['createdAt'])
                   else
                     SKIP
                   end
      updated_at = if hash.key?('updatedAt')
                     (DateTimeHelper.from_rfc3339(hash['updatedAt']) if hash['updatedAt'])
                   else
                     SKIP
                   end

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      ModelEx.new(name: name,
                  type: type,
                  description: description,
                  id: id,
                  proprietary: proprietary,
                  base_model: base_model,
                  base_model_id: base_model_id,
                  created_at: created_at,
                  updated_at: updated_at,
                  additional_properties: additional_properties)
    end

    def to_custom_created_at
      DateTimeHelper.to_rfc3339(created_at)
    end

    def to_custom_updated_at
      DateTimeHelper.to_rfc3339(updated_at)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id}, name: #{@name}, type: #{@type}, description: #{@description},"\
      " proprietary: #{@proprietary}, base_model: #{@base_model}, base_model_id:"\
      " #{@base_model_id}, created_at: #{@created_at}, updated_at: #{@updated_at},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} id: #{@id.inspect}, name: #{@name.inspect}, type: #{@type.inspect},"\
      " description: #{@description.inspect}, proprietary: #{@proprietary.inspect}, base_model:"\
      " #{@base_model.inspect}, base_model_id: #{@base_model_id.inspect}, created_at:"\
      " #{@created_at.inspect}, updated_at: #{@updated_at.inspect}, additional_properties:"\
      " #{@additional_properties}>"
    end
  end
end
