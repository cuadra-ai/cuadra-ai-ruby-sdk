# cuadra_ai
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CuadraAi
  # Tokens used
  class TokensEx < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Number of tokens of the request input
    # @return [Integer]
    attr_accessor :input_tokens

    # Number of tokens of the response output
    # @return [Integer]
    attr_accessor :output_tokens

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['input_tokens'] = 'inputTokens'
      @_hash['output_tokens'] = 'outputTokens'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        input_tokens
        output_tokens
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(input_tokens: SKIP, output_tokens: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @input_tokens = input_tokens unless input_tokens == SKIP
      @output_tokens = output_tokens unless output_tokens == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      input_tokens = hash.key?('inputTokens') ? hash['inputTokens'] : SKIP
      output_tokens = hash.key?('outputTokens') ? hash['outputTokens'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      TokensEx.new(input_tokens: input_tokens,
                   output_tokens: output_tokens,
                   additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} input_tokens: #{@input_tokens}, output_tokens: #{@output_tokens},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} input_tokens: #{@input_tokens.inspect}, output_tokens:"\
      " #{@output_tokens.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
