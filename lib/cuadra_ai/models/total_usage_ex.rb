# cuadra_ai
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CuadraAi
  # TotalUsageEx Model.
  class TotalUsageEx < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Total Input Tokens used for this month
    # @return [Integer]
    attr_accessor :total_input

    # Total Ouput Tokens used for this month
    # @return [Integer]
    attr_accessor :total_output

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['total_input'] = 'totalInput'
      @_hash['total_output'] = 'totalOutput'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        total_input
        total_output
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(total_input: SKIP, total_output: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @total_input = total_input unless total_input == SKIP
      @total_output = total_output unless total_output == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      total_input = hash.key?('totalInput') ? hash['totalInput'] : SKIP
      total_output = hash.key?('totalOutput') ? hash['totalOutput'] : SKIP

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      TotalUsageEx.new(total_input: total_input,
                       total_output: total_output,
                       additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} total_input: #{@total_input}, total_output: #{@total_output},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} total_input: #{@total_input.inspect}, total_output:"\
      " #{@total_output.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
