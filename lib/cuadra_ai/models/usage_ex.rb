# cuadra_ai
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CuadraAi
  # This is the token usage result of your request
  class UsageEx < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # Tokens used
    # @return [TokensEx]
    attr_accessor :billed_tokens

    # Tokens used
    # @return [TokensEx]
    attr_accessor :used_tokens

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['billed_tokens'] = 'billedTokens'
      @_hash['used_tokens'] = 'usedTokens'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        billed_tokens
        used_tokens
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(billed_tokens: SKIP, used_tokens: SKIP,
                   additional_properties: nil)
      # Add additional model properties to the instance
      additional_properties = {} if additional_properties.nil?

      @billed_tokens = billed_tokens unless billed_tokens == SKIP
      @used_tokens = used_tokens unless used_tokens == SKIP
      @additional_properties = additional_properties
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      billed_tokens = TokensEx.from_hash(hash['billedTokens']) if hash['billedTokens']
      used_tokens = TokensEx.from_hash(hash['usedTokens']) if hash['usedTokens']

      # Create a new hash for additional properties, removing known properties.
      new_hash = hash.reject { |k, _| names.value?(k) }

      additional_properties = APIHelper.get_additional_properties(
        new_hash, proc { |value| value }
      )

      # Create object from extracted values.
      UsageEx.new(billed_tokens: billed_tokens,
                  used_tokens: used_tokens,
                  additional_properties: additional_properties)
    end

    # Provides a human-readable string representation of the object.
    def to_s
      class_name = self.class.name.split('::').last
      "<#{class_name} billed_tokens: #{@billed_tokens}, used_tokens: #{@used_tokens},"\
      " additional_properties: #{@additional_properties}>"
    end

    # Provides a debugging-friendly string with detailed object information.
    def inspect
      class_name = self.class.name.split('::').last
      "<#{class_name} billed_tokens: #{@billed_tokens.inspect}, used_tokens:"\
      " #{@used_tokens.inspect}, additional_properties: #{@additional_properties}>"
    end
  end
end
